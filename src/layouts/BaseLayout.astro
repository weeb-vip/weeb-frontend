---
import '../scss/base.scss';
import '../fontawesome';
import { ViewTransitions } from 'astro:transitions';
import GlobalToaster from '../svelte/components/GlobalToaster.svelte';
import { getConfig } from '../config';

export interface Props {
  title?: string;
  description?: string;
  image?: string;
  noIndex?: boolean;
}

const { title, description, image, noIndex } = Astro.props;
const config = getConfig();

const defaultTitle = 'WeebVIP - Track Your Anime Watchlist';
const defaultDescription = 'Discover, track, and manage your anime watchlist with WeebVIP. Get notifications for new episodes, explore seasonal anime, and connect with other anime fans.';
const defaultImage = '/assets/icons/logo6-rev-sm_sm.png';

const pageTitle = title ? `${title} | WeebVIP` : defaultTitle;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description || defaultDescription} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" href="/assets/favicon/favicon.ico"/>
    <link rel="icon" type="image/png" sizes="32x32" href="/assets/favicon/favicon-32x32.png"/>
    <link rel="icon" type="image/png" sizes="16x16" href="/assets/favicon/favicon-16x16.png"/>
    <link rel="apple-touch-icon" sizes="180x180" href="/assets/favicon/apple-touch-icon.png"/>
    <meta name="generator" content={Astro.generator} />
    <title>{pageTitle}</title>

    <!-- View Transitions for smooth page navigation -->
    <ViewTransitions fallback="animate" />

    <!-- Disable transitions on header elements to prevent icon scaling -->
    <script>
      document.addEventListener('astro:before-preparation', () => {
        // Mark header elements to be excluded from view transitions
        const headerElements = document.querySelectorAll('header, [data-astro-transition-persist="header"]');
        headerElements.forEach(el => {
          el.style.viewTransitionName = 'none';
        });
      });
    </script>

    <!-- Custom transition styles -->
    <style>
      /* Simple fade transition for pages */
      ::view-transition-old(root),
      ::view-transition-new(root) {
        animation-duration: 300ms;
        animation-timing-function: ease-in-out;
      }

      ::view-transition-old(root) {
        animation-name: fade-out;
      }

      ::view-transition-new(root) {
        animation-name: fade-in;
      }

      @keyframes fade-out {
        to {
          opacity: 0;
        }
      }

      @keyframes fade-in {
        from {
          opacity: 0;
        }
      }

      /* Fix icon sizes during transitions - target React FontAwesome SVGs */
      /* Override Tailwind's display: block for SVG on FontAwesome icons */
      .svg-inline--fa,
      svg.svg-inline--fa,
      svg[data-prefix],
      svg[data-icon],
      svg[role="img"],
      header svg,
      .fa-search svg,
      .fa-bars svg,
      .fa-moon svg,
      button svg,
      a svg {
        display: inline !important;
        width: 1em !important;
        height: 1em !important;
        font-size: inherit !important;
        vertical-align: -0.125em !important;
        transform: none !important;
        min-width: unset !important;
        min-height: unset !important;
        max-width: 1em !important;
        max-height: 1em !important;
        flex-shrink: 0 !important;
      }

      /* Force FontAwesome to respect container sizes */
      .fa-search,
      .fa-magnifying-glass,
      [data-icon="search"],
      [data-icon="magnifying-glass"] {
        width: 1em !important;
        height: 1em !important;
        font-size: inherit !important;
      }

      .fa-bars,
      [data-icon="bars"] {
        width: 1em !important;
        height: 1em !important;
        font-size: inherit !important;
      }

      .fa-moon,
      [data-icon="moon"] {
        width: 1em !important;
        height: 1em !important;
        font-size: inherit !important;
      }

      /* Override any transform scaling on FontAwesome icons */
      svg.svg-inline--fa,
      .svg-inline--fa svg {
        transform: none !important;
        transform-origin: center !important;
      }

      /* Ensure text size classes work correctly */
      .text-xl svg.svg-inline--fa {
        font-size: 1.25rem !important;
      }

      .text-lg svg.svg-inline--fa {
        font-size: 1.125rem !important;
      }

      .text-base svg.svg-inline--fa {
        font-size: 1rem !important;
      }

      .text-sm svg.svg-inline--fa {
        font-size: 0.875rem !important;
      }

      /* Ensure Tailwind sizing classes work */
      .w-4 {
        width: 1rem !important;
      }

      .h-4 {
        height: 1rem !important;
      }

      .w-10 {
        width: 2.5rem !important;
      }

      .h-10 {
        height: 2.5rem !important;
      }

      /* Prevent icon scaling during view transitions */
      ::view-transition-old(root) .svg-inline--fa,
      ::view-transition-new(root) .svg-inline--fa,
      ::view-transition-old(root) svg.svg-inline--fa,
      ::view-transition-new(root) svg.svg-inline--fa,
      ::view-transition-old(root) svg[data-prefix],
      ::view-transition-new(root) svg[data-prefix],
      ::view-transition-old(root) svg[data-icon],
      ::view-transition-new(root) svg[data-icon],
      ::view-transition-old(root) header svg,
      ::view-transition-new(root) header svg,
      ::view-transition-old(root) button svg,
      ::view-transition-new(root) button svg {
        width: 1em !important;
        height: 1em !important;
        font-size: inherit !important;
        transform: none !important;
        animation: none !important;
        transition: none !important;
      }

      /* Lock icon sizes during transition states */
      html[data-astro-transition] .svg-inline--fa,
      html[data-astro-transition-scope] .svg-inline--fa,
      html[data-astro-transition] svg.svg-inline--fa,
      html[data-astro-transition-scope] svg.svg-inline--fa,
      html[data-astro-transition] svg[data-prefix],
      html[data-astro-transition-scope] svg[data-prefix],
      html[data-astro-transition] svg[data-icon],
      html[data-astro-transition-scope] svg[data-icon],
      html[data-astro-transition] header svg,
      html[data-astro-transition-scope] header svg,
      html[data-astro-transition] button svg,
      html[data-astro-transition-scope] button svg {
        width: 1em !important;
        height: 1em !important;
        font-size: inherit !important;
        transform: none !important;
        animation: none !important;
        transition: none !important;
      }

      /* Force all FontAwesome elements to have stable dimensions during any animation */
      .svg-inline--fa *,
      svg.svg-inline--fa *,
      svg[data-prefix] *,
      svg[data-icon] *,
      header svg *,
      button svg * {
        animation: none !important;
        transition: none !important;
        transform: none !important;
      }

      /* Completely exclude header from view transitions */
      header {
        view-transition-name: none !important;
      }

      [data-astro-transition-persist="header"] {
        view-transition-name: none !important;
      }

      /* Specific header transition without scaling */
      ::view-transition-old(header),
      ::view-transition-new(header) {
        animation-duration: 0ms !important;
        animation: none !important;
        transform: none !important;
      }

      ::view-transition-old(header) svg.svg-inline--fa,
      ::view-transition-new(header) svg.svg-inline--fa {
        width: 1em !important;
        height: 1em !important;
        font-size: inherit !important;
        transform: none !important;
      }

      /* Respect reduced motion preference */
      @media (prefers-reduced-motion: reduce) {
        ::view-transition-old(root),
        ::view-transition-new(root) {
          animation: none !important;
        }
      }
    </style>

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={pageTitle} />
    <meta property="og:description" content={description || defaultDescription} />
    <meta property="og:image" content={image || defaultImage} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={pageTitle} />
    <meta property="twitter:description" content={description || defaultDescription} />
    <meta property="twitter:image" content={image || defaultImage} />

    <!-- SEO -->
    {noIndex && <meta name="robots" content="noindex, nofollow" />}

    <!-- Theme -->
    <meta name="color-scheme" content="dark light">
    <meta name="theme-color" content="#1f2937">

    <!-- PWA -->
    <link rel="manifest" href="/manifest.json">
    <link rel="apple-touch-icon" href="/assets/icons/logo6-rev-sm_sm.png">

    <!-- Theme initialization (blocking to prevent flash) -->
    <script>
      // Initialize theme immediately to prevent flash
      (function() {
        const savedTheme = localStorage.getItem('theme');
        let shouldUseDark = false;

        if (savedTheme === 'dark') {
          shouldUseDark = true;
        } else if (savedTheme === 'light') {
          shouldUseDark = false;
        } else {
          // No saved preference, use system preference
          shouldUseDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        }

        if (shouldUseDark) {
          document.documentElement.classList.add('dark');
        }
      })();
    </script>

    <!-- Preload critical resources -->
    <link rel="preconnect" href="https://gateway.staging.weeb.vip">
    <link rel="preconnect" href="https://weeb-api.staging.weeb.vip">

    <!-- Umami Analytics -->
    <script defer src="https://analytics.weeb.vip/script.js" data-website-id={config.umami_website_id}></script>
  </head>
  <body class="bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-300">
    <!-- Global Svelte toaster for notifications -->
    <GlobalToaster client:only="svelte" transition:persist="toast-provider" />

    <slot />

    <!-- Initialize app - config should already be loaded by middleware -->
    <script>
      // Initialize theme: localStorage first, then system preference
      function initializeTheme() {
        const savedTheme = localStorage.getItem('theme');
        let shouldUseDark = false;

        if (savedTheme === 'dark') {
          shouldUseDark = true;
        } else if (savedTheme === 'light') {
          shouldUseDark = false;
        } else {
          // No saved preference, use system preference
          shouldUseDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        }

        if (shouldUseDark) {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }

        console.log('Theme initialized:', {
          savedTheme,
          systemPrefersDark: window.matchMedia('(prefers-color-scheme: dark)').matches,
          isDarkMode: shouldUseDark
        });
      }

      // Initialize immediately
      initializeTheme();

      // Config should already be loaded by SSR middleware and available globally
      if (typeof window !== 'undefined' && !window.config) {
        console.warn('Config not found on window - this should have been loaded by SSR middleware');
      }

      // Initialize analytics tracking
      import('/src/utils/analytics.js').then(({ initializeAnalytics }) => {
        initializeAnalytics();
      }).catch(() => {
        console.warn('Failed to initialize analytics');
      });
    </script>

    <!-- View Transitions Setup -->
    <script>
      // Debug View Transitions
      console.log('View Transitions API supported:', 'startViewTransition' in document);

      // Expose Astro's navigate function for React components
      if (typeof window !== 'undefined') {
        // Import navigate from astro:transitions/client
        import('astro:transitions/client').then(({ navigate }) => {
          window.astroNavigate = navigate;
          console.log('Astro navigate function available');
        }).catch(() => {
          console.log('Astro navigate not available, using fallback');
        });
      }

      // Listen for astro navigation events
      document.addEventListener('astro:before-preparation', (e) => {
        console.log('Astro: Before preparation', e.detail);
      });

      document.addEventListener('astro:before-swap', (e) => {
        console.log('Astro: Before swap', e.detail);
      });

      document.addEventListener('astro:after-swap', (e) => {
        console.log('Astro: After swap', e.detail);
      });

      document.addEventListener('astro:page-load', (e) => {
        console.log('Astro: Page loaded', e.detail);
      });
    </script>

    <!-- PWA Service Worker Registration -->
    <script>
      // Register service worker for PWA functionality
      if ('serviceWorker' in navigator) {
        console.log('🔧 ServiceWorker supported, registering...');
        window.addEventListener('load', () => {
          console.log('📄 Page loaded, registering ServiceWorker');
          navigator.serviceWorker.register('/sw.js')
            .then(registration => {
              console.log('✅ SW registration successful:', registration);
              console.log('🔍 SW scope:', registration.scope);

              // Check for updates every 30 seconds when visible
              setInterval(() => {
                if (document.visibilityState === 'visible') {
                  registration.update();
                }
              }, 30000);

              // Handle service worker updates
              registration.addEventListener('updatefound', () => {
                console.log('🔄 SW update found');
                const newWorker = registration.installing;
                if (newWorker) {
                  newWorker.addEventListener('statechange', () => {
                    console.log('🔄 SW state changed to:', newWorker.state);
                    if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                      console.log('🔄 New SW installed, prompting for reload');
                      // New content available, reload to update
                      if (confirm('New content available, reload to update?')) {
                        window.location.reload();
                      }
                    }
                  });
                }
              });
            })
            .catch(registrationError => {
              console.error('❌ SW registration failed:', registrationError);
            });
        });
      } else {
        console.log('❌ ServiceWorker not supported');
      }
    </script>
  </body>
</html>