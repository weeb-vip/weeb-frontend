---
import SvelteLayout from '../../layouts/SvelteLayout.astro';
import ShowContentWithProvider from '../../svelte/components/ShowContentWithProvider.svelte';
import { GraphQLClient } from 'graphql-request';
import { ensureConfigLoaded } from '../../services/config-loader';

export const prerender = false;

// Get the anime ID from the URL parameters
const { id } = Astro.params;

if (!id) {
  return Astro.redirect('/404');
}

// Access SSR auth data and config
const { auth, config } = Astro.locals;

// Initialize variables for SEO and data
let animeTitle = 'Anime Details';
let animeDescription = 'View anime details, episodes, and information';
let animeImage = '/assets/og-image.jpg';
let animeData = null;
let charactersData = null;
let error = null;

try {
  console.log('üåê Show Details SSR GraphQL URL:', config.graphql_host);
  const client = new GraphQLClient(config.graphql_host, {
    headers: {
      ...(auth.authToken && { Authorization: `Bearer ${auth.authToken}` })
    }
  });

  // Full anime details query (same as client-side)
  const animeDetailsQuery = `
    query getAnimeDetailsByID($id: ID!) {
        anime(id: $id) {
            id
            anidbid
            thetvdbid
            titleEn
            titleJp
            titleRomaji
            titleKanji
            titleSynonyms
            description
            imageUrl
            tags
            studios
            animeStatus
            episodeCount
            episodes {
                id
                animeId
                episodeNumber
                titleEn
                titleJp
                synopsis
                airDate
                createdAt
                updatedAt
            }
            duration
            rating
            startDate
            endDate
            broadcast
            source
            licensors
            ranking
            createdAt
            updatedAt
            userAnime {
                id
                status
                score
            }
        }
    }
  `;

  // Characters and staff query
  const charactersQuery = `
    query CharactersAndStaffByAnimeId($animeId: ID!) {
        charactersAndStaffByAnimeId(animeId: $animeId) {
            character {
                id
                animeId
                name
                role
                birthday
                zodiac
                gender
                race
                height
                weight
                title
                martialStatus
                summary
                image
                createdAt
                updatedAt
            }
            staff {
                id
                language
                givenName
                familyName
                image
                birthday
                birthPlace
                bloodType
                hobbies
                summary
                createdAt
                updatedAt
            }
        }
    }
  `;

  // Fetch both anime details and characters in parallel
  const [animeResponse, charactersResponse] = await Promise.all([
    client.request(animeDetailsQuery, { id }),
    client.request(charactersQuery, { animeId: id })
  ]);

  animeData = animeResponse;
  charactersData = charactersResponse;

  // Set SEO data from fetched anime info
  if (animeData?.anime) {
    const anime = animeData.anime;
    // For SEO purposes, default to English title first, then Japanese
    // This matches the default preference of 'english' in preferences store
    animeTitle = anime.titleEn || anime.titleJp || 'Anime Details';
    animeDescription = anime.description
      ? `${anime.description.substring(0, 160)}...`
      : `Watch and track ${animeTitle} episodes, get notifications, and manage your anime watchlist on WeebVIP.`;

    if (anime.imageUrl) {
      animeImage = `https://cdn.weeb.vip/weeb-staging/${encodeURIComponent(anime.imageUrl)}`;
    }
  }

  console.log('‚úÖ [SSR] Successfully fetched anime data and characters');
} catch (err) {
  console.error('[SSR] Failed to fetch anime data:', err);
  error = err;
  // Fallback to generic SEO data
}
---

<SvelteLayout
  title={animeTitle}
  description={animeDescription}
  image={animeImage}
  variant="fullwidth"
>
  <ShowContentWithProvider
    animeId={id}
    ssrAnimeData={animeData}
    ssrCharactersData={charactersData}
    ssrError={error}
    client:load
  />
</SvelteLayout>
