---
import SvelteLayout from '../../layouts/SvelteLayout.astro';
import AiringCalendar from '../../svelte/components/AiringCalendar.svelte';
import { GraphQLClient } from 'graphql-request';
import { getCurrentlyAiringWithDatesAndEpisodes } from '../../services/api/graphql/queries';
import {
  startOfMonth,
  endOfMonth,
  startOfWeek,
  endOfWeek,
  addDays
} from 'date-fns';

export const prerender = false;

// Access SSR auth data
const { auth, config } = Astro.locals;

// Create authenticated GraphQL client for SSR
function createSSRGraphQLClient(authToken: string | undefined) {
  console.log('🗓️ SSR Calendar GraphQL URL:', config.graphql_host);
  return new GraphQLClient(config.graphql_host, {
    headers: {
      ...(authToken && { Authorization: `Bearer ${authToken}` })
    },
    fetch: (input: RequestInfo | URL, init?: RequestInit) => {
      return fetch(input, {
        ...init,
        credentials: 'include'
      });
    }
  });
}

// Helper function to check if error is auth-related
function isAuthError(error: any): boolean {
  const message = error?.message?.toLowerCase() || '';
  const response = error?.response;

  if (response?.errors && Array.isArray(response.errors)) {
    const hasAuthError = response.errors.some((err: any) => {
      const msg = (err.message || '').toLowerCase();
      return msg.includes('access denied') ||
             msg.includes('unauthorized') ||
             msg.includes('invalid token') ||
             msg.includes('jwt') ||
             msg.includes('authentication') ||
             msg.includes('forbidden') ||
             msg.includes('expired');
    });
    if (hasAuthError) return true;
  }

  return message.includes('access denied') ||
         message.includes('unauthorized') ||
         message.includes('invalid token') ||
         message.includes('jwt') ||
         message.includes('authentication') ||
         message.includes('forbidden') ||
         message.includes('expired');
}

// Fetch calendar data server-side
let calendarData: any = null;
let ssrError: string | null = null;
let isTokenExpired = false;

try {
  const client = createSSRGraphQLClient(auth.authToken);

  // Helper function to fetch with timeout and error handling
  async function fetchWithFallback(query, variables, description) {
    try {
      const timeoutPromise = new Promise((_, reject) =>
        setTimeout(() => reject(new Error('Request timeout')), 10000)
      );

      const requestPromise = client.request(query, variables);
      return await Promise.race([requestPromise, timeoutPromise]);
    } catch (error) {
      console.error(`[SSR] Failed to fetch ${description}:`, error);

      if (isAuthError(error)) {
        console.warn(`[SSR] Auth error detected for ${description} - token may be expired`);
        isTokenExpired = true;

        // Try fetching without auth token for public data
        try {
          const publicClient = createSSRGraphQLClient(undefined);
          const timeoutPromise = new Promise((_, reject) =>
            setTimeout(() => reject(new Error('Public request timeout')), 8000)
          );

          const publicRequestPromise = publicClient.request(query, variables);
          return await Promise.race([publicRequestPromise, timeoutPromise]);
        } catch (publicError) {
          console.error(`[SSR] Failed to fetch ${description} without auth:`, publicError);
          return null;
        }
      }
      return null;
    }
  }

  // Calculate default month view date range (same logic as client component)
  const currentDate = new Date();
  const calendarStart = startOfMonth(currentDate);
  const calendarEnd = endOfMonth(currentDate);

  // Fetch calendar data for the current month view
  calendarData = await fetchWithFallback(getCurrentlyAiringWithDatesAndEpisodes, {
    input: { startDate: calendarStart, daysInFuture: 32 },
    limit: 300
  }, 'calendar data');

  console.log('[SSR] Calendar page data result:', {
    calendarDataLength: calendarData?.currentlyAiring?.length || 0,
    hasData: !!calendarData,
    dateRange: {
      start: calendarStart.toISOString(),
      end: calendarEnd.toISOString()
    }
  });

} catch (error) {
  console.error('[SSR] Failed to create GraphQL client for calendar page:', error);
  ssrError = 'Failed to load calendar data';
}

// If token was expired, update auth status
if (isTokenExpired) {
  console.log('[SSR] Token expired detected on calendar page - updating auth locals');
  auth.isLoggedIn = false;
  auth.authToken = undefined;
  auth.refreshToken = undefined;
  auth.hasAuthToken = false;
  auth.hasRefreshToken = false;
}
---

<SvelteLayout
  title="Airing Calendar"
  description="View anime airing schedule in a calendar format. See episodes by date and plan your watching schedule."
>
  <AiringCalendar
    client:load
    ssrData={calendarData}
    ssrError={ssrError}
    isTokenExpired={isTokenExpired}
  />
</SvelteLayout>