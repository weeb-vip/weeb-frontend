name: Semantic Release
on:
  push:
    branches:
      - main
      
jobs:
  # Run tests first
  test:
    name: Run Tests
    uses: ./.github/workflows/test.yml
    
  e2e:
    name: Run E2E Tests
    uses: ./.github/workflows/e2e-tests.yml
    
  release:
    needs: [test, e2e]  # Only run release after tests pass
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: false # <--- this
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Install dependencies
        run: corepack enable && yarn set version stable && yarn install
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      - name: Set env
        run: |
          git fetch --tags
          export GITHUB_REF_NAME=$(git describe --tags --abbrev=0)
          echo "RELEASE_VERSION=$GITHUB_REF_NAME" >> $GITHUB_ENV
      - name: Update deployment tags
        run: |
          echo "ðŸ”„ Updating deployment workflow with new tag: $RELEASE_VERSION"
          node scripts/update-deployment-tags.js

          # Check if there are changes to commit
          if git diff --quiet .github/workflows/deploy-cloudflare.yml; then
            echo "No changes to deployment workflow"
          else
            echo "Committing updated deployment tags"
            git config --global user.email "noreply@weeb.vip"
            git config --global user.name "weeb-vip-bot"
            git add .github/workflows/deploy-cloudflare.yml
            git commit -m "ci: update deployment tags with $RELEASE_VERSION"

            # Use the same token method as semantic-release
            git remote set-url origin https://x-access-token:${{ secrets.ACCESS_TOKEN }}@github.com/${{ github.repository }}.git
            git push origin main
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: set tag
        run: |
          export TAG=$(echo $RELEASE_VERSION | sed 's/v//')
          echo "tag=$TAG" >> $GITHUB_ENV
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.REGISTRY }}/weeb-vip/weeb-frontend:${{ env.tag }}
          build-args: |
            VITE_APP_VERSION=${{ env.RELEASE_VERSION }}
      - uses: actions/checkout@v3
      - name: Set env
        run: |
          git fetch --tags
          export GITHUB_REF_NAME=$(git describe --tags --abbrev=0)
          echo "RELEASE_VERSION=$GITHUB_REF_NAME" >> $GITHUB_ENV
      - name: Set env
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
      - name: checkout argocd repo
        uses: actions/checkout@v3
        with:
          repository: 'weeb-vip/weeb-argocd'
          token: ${{ secrets.ACCESS_TOKEN }}
          path: 'argocd'
      - name: deploy to argocd
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          REPO_NAME: ${{ env.REPO_NAME }}
        # pull argocd repo and push to argocd
        run: |
          RELEASE_VERSION=$(echo $RELEASE_VERSION | sed 's/v//')
          cd argocd && find . -type f -name '*.yaml' -print0 | xargs -0 sed -E -i 's/(tag:[[:space:]]).*( # '"$REPO_NAME"')/\1'"$RELEASE_VERSION"'\2/'
          git config --global user.email "noreply@weeb.vip"
          git config --global user.name "weeb-vip"
          git add .
          git commit -m "feat: $REPO_NAME $RELEASE_VERSION"
          git push origin main

#      - name: Release
#        env:
#          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
#        run: npx semantic-release
